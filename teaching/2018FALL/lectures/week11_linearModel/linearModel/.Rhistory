library(ElemStatLearn)
str(prostate)
prostate$train <- NULL
x <- as.matrix(prostate[,1:8])
y <- prostate[,9]
lars(x, y)
library(lars)
x <- as.matrix(prostate[,1:8])
y <- prostate[,9]
lars(x, y)
ttt <- lars(x, y)
names(ttt)
ttt$lambda
?lars
plot(ttt)
lassoFit <- lars(x, y)
beta = coef(lassoFit, s=5, mode="lambda")
beta
?coef
beta = coef(lassoFit, s=0.3, mode="lambda")
beta
beta = coef(lassoFit, s=0.5, mode="lambda")
beta
coef(lassoFit, s=0.5, mode="lasso") ## get
coef(lassoFit, s=0.5, mode="fraction") ## get
coef(lassoFit, s=4, mode="fraction") ## get
coef(lassoFit, s=2, mode="lambda") ## get
cars
mtcars
lm(mpg ~ cyl, data=mtcars)
lm(mpg ~ cyl, data=mtcars)
plot(lm(mpg ~ cyl, data=mtcars)
)
prostate
library(ElemStatLearn)
cor_prostate <- cor(prostate)
max(cor_prostate[cor_prostate!=1])
maxID <- arrayInd(which(max(cor_prostate[cor_prostate!=1]) == cor_prostate), dim(cor_prostate))
names(prostate[maxID[1,]])
max(cor_prostate[cor_prostate!=1]) == cor_prostate
which(max(cor_prostate[cor_prostate!=1]) == cor_prostate), dim(cor_prostate)
which(max(cor_prostate[cor_prostate!=1]) == cor_prostate), dim(cor_prostate))
which(max(cor_prostate[cor_prostate!=1]) == cor_prostate)
dim(cor_prostate)
arrayInd(which(max(cor_prostate[cor_prostate!=1]) == cor_prostate), dim(cor_prostate))
heatmap(cor_prostate)
?heatmap
cor_prostate
heatmap(cor_prostate)
heatmap
?heatmap
heatmap(cor_prostate, scale="none")
?heatmap
lm_prostate <- lm(lpsa ~ age + lweight, data = prostate)
summary(lm_prostate)
coef(lm_prostate)
confint(lm_prostate)
predict(lm_prostate)
dim(prostate)
fitted(lm_prostate)
TukeyHSD(lm_prostate)
pairwise.t.test(lm_prostate)
?pairwise.t.test
?TukeyHSD
anew <- data.frame(age = 29, lweight = 100)
predict(lm_prostate, anew)
library(ElemStatLearn)
head(prostate)
lm(lpsa ~ - 1 + age, data = prostate)
lm(lpsa ~ age + lweight + gleason + gleason:lweight, data = prostate)
prostate$svi
lm(lpsa ~ factor(svi), data = prostate)
lm(lpsa ~ factor(gleason), data = prostate)
lm(lpsa ~ (age + lweight + gleason)^2, data = prostate)
lm(lpsa ~ (age + lweight + gleason)^2 - gleason:lweight, data = prostate)
lm(lpsa ~ I(age^2) , data = prostate)
lm(log(lpsa) ~ age, data = prostate)
lm(log(age) ~ lpsa, data = prostate)
lm(lpsa ~ ., data = prostate)
lm(lpsa ~ as.factor(svi)/as.factor(gleason), data = prostate)
lm(lpsa ~ as.factor(gleason), data = prostate)
blm <- lm(lpsa ~ as.factor(gleason), data = prostate)
summary(blm)
aov(blm)
summary.aov(blm)
clm <- aov(lpsa ~ as.factor(gleason), data = prostate)
clm <- aov(lpsa ~ as.factor(gleason), data = prostate)
summary(clm)
dlm <- aov(lpsa ~ as.factor(gleason) + age, data = prostate)
summary(dlm)
plot.lm(lm_prostate, 1)
plot(lm_prostate, 1)
lm_prostate <- lm(lpsa ~ age + lweight, data = prostate)
plot(lm_prostate, 1)
qqnorm()
qqnorm(1:10)
qqnorm(1:1000)
qqnorm(rnorm(1000))
qqnorm(rnorm(1000,sd=10))
qqnorm(rnorm(1000))
qqnorm(1:1000)
qqnorm(rnorm(1000))
set.seed(32611)
qqnorm(rexp(1000))
set.seed(32611)
shapiro.test(rnorm(1000))
shapiro.test(1:1000)
shapiro.test(residuals(lm_prostate))
plot(lm_prostate, 3)
plot(lm_prostate, 5)
?step
outlierTest
vif
library(minpack.lm)
nls.lm()
nls.lm
?nls.lm
set.seed(32611)
n <- 100
x <- runif(n,0,2*pi)
y <- sin(x) + rnorm(n,sd=0.4)
plot(x,y)
set.seed(32611)
n <- 100
x <- runif(n,0,2*pi)
y <- sin(x) + rnorm(n,sd=0.2)
plot(x,y)
getPred <- function(parS, xx) {
parS$A * sin(xx + parS$phase) + parS$offset
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(phase=3, offset=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
parStart <- list(A=1, phase=3, offset=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
plot(nls.out)
names(nls.out)
nls.out$par
aseq <- seq(0,2*pi,1000)
plot(x,y)
with(nls.out, lines(aseq, A*sin(aseq + B) + c))
parStart <- list(A=1, B=3, C=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
parStart <- list(A=1, B=3, C=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
names(nls.out)
parStart <- list(A=1, B=3, C=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
getPred <- function(parS, xx) {
parS$A * sin(xx + parS$B) + parS$C
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(A=1, B=3, C=0)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
aseq <- seq(0,2*pi,1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*sin(aseq + B) + c))
nls.out$par
with(nls.out$par, lines(aseq, A*sin(aseq + B) + C))
with(nls.out$par, lines(aseq, A*sin(aseq + B) + C))
plot(x,y)
with(nls.out$par, lines(aseq, A*sin(aseq + B) + C))
aseq
aseq <- seq(0,2*pi,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*sin(aseq + B) + C))
set.seed(32611)
n <- 100;
x <- runif(n,0,10)
y <- exp(x)
plot(x,y)
getPred <- function(parS, xx) {
parS$A * exp(parS$B * xx)
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(A=3, B=3)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
aseq <- seq(0,1,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*exp(B*aseq), col=2))
getPred <- function(parS, xx) {
parS$A * exp(parS$B * xx)
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(A=3, B=3)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
aseq <- seq(0,1,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*exp(B*aseq), col=2))
x
y
x
set.seed(32611)
n <- 100;
x <- runif(n)
y <- exp(x)
plot(x,y)
getPred <- function(parS, xx) {
parS$A * exp(parS$B * xx)
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(A=3, B=3)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
aseq <- seq(0,1,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*exp(B*aseq), col=2))
set.seed(32611)
n <- 100;
x <- runif(n,0,3)
y <- exp(x)
plot(x,y)
set.seed(32611)
n <- 100;
x <- runif(n,0,5)
y <- exp(x)
plot(x,y)
getPred <- function(parS, xx) {
parS$A * exp(parS$B * xx)
}
residFun <- function(p, observed, xx) observed - getPred(p,xx)
parStart <- list(A=3, B=3)
nls.out <- nls.lm(par=parStart, fn = residFun, observed = y,	xx = x)
nls.out
aseq <- seq(0,1,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*exp(B*aseq), col=2))
aseq <- seq(0,5,length.out = 1000)
plot(x,y)
with(nls.out$par, lines(aseq, A*exp(B*aseq), col=2))
install.packages("minpack.lm")
require(graphics)
plot(dist ~ speed, data = cars, main = "data(cars)  &  smoothing splines")
cars.spl <- with(cars, smooth.spline(speed, dist))
cars.spl
## This example has duplicate points, so avoid cv = TRUE
lines(cars.spl, col = "blue")
ss10 <- smooth.spline(cars[,"speed"], cars[,"dist"], df = 10)
lines(ss10, lty = 2, col = "red")
legend(5,120,c(paste("default [C.V.] => df =",round(cars.spl$df,1)),
"s( * , df = 10)"), col = c("blue","red"), lty = 1:2,
bg = 'bisque')
mtcars
plot(disp ~ mpg, data = mtcars, main = "data(mtcars)  &  smoothing splines")
cars.spl <- with(mtcars, smooth.spline(disp, mpg))
plot(disp ~ mpg, data = mtcars, main = "data(mtcars)  &  smoothing splines")
lines(cars.spl, col = "blue")
cars.spl <- with(mtcars, smooth.spline(mpg, disp))
cars.spl
plot(disp ~ mpg, data = mtcars, main = "data(mtcars)  &  smoothing splines")
lines(cars.spl, col = "blue")
?which
arr.ind
library(ElemStatLearn)
str(prostate)
lm(lpsa ~ as.factor(svi)/as.factor(gleason), data = prostate)
a <- lm(lpsa ~ as.factor(svi)/as.factor(gleason), data = prostate)
summary(a)
set.seed(32611)
qqnorm(rnorm(1000))
abline(1,1,col=2)
abline(h = 0,v = 1,col=2)
abline(a = 0,b = 0,col=2)
abline(a = 1,b = 0,col=2)
abline(a = 0,b = 1, col=2)
set.seed(32611)
shapiro.test(rnorm(1000))
set.seed(32611)
shapiro.test(rnorm(1000,sd=3))
vif
library(car)
vif
lm_all <- lm(lpsa ~ ., data=prostate) ## . Rest of all the other vaiables.
vif(lm_all)
car::vif(lm_all)
stepDetails <- step(lm(lpsa ~ ., data=prostate), trace=0)$anova
stepDetails
