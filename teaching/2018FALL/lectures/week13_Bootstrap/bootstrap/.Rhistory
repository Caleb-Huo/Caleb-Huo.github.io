tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
segments(CI_l, r, CI_h, r)
if(CI_l < truth & truth < CI_h){
counts <- counts + 1
}
}
counts/Repeats
lambda <- 5
n <- 100
truth <- lambda^2 + lambda/n
B <- 1000
Repeats <- 1000
counts <- 0
plot(c(0,100),c(0,100), type="n", xlab="boot CI", ylab="repeats index")
abline(v = truth, col=2)
for(r in 1:Repeats){
set.seed(r)
X <- rpois(n, lambda)
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
segments(CI_l, r, CI_h, r)
if(CI_l < truth & truth < CI_h){
counts <- counts + 1
}
}
counts/Repeats
lambda <- 5
n <- 1000
truth <- lambda^2 + lambda/n
B <- 1000
Repeats <- 1000
counts <- 0
plot(c(0,100),c(0,Repeats), type="n", xlab="boot CI", ylab="repeats index")
abline(v = truth, col=2)
for(r in 1:Repeats){
set.seed(r)
X <- rpois(n, lambda)
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
segments(CI_l, r, CI_h, r)
if(CI_l < truth & truth < CI_h){
counts <- counts + 1
}
}
counts/Repeats
lambda <- 5
n <- 100
truth <- lambda^2 + lambda/n
B <- 1000
Repeats <- 100
counts <- 0
plot(c(0,100),c(0,Repeats), type="n", xlab="boot CI", ylab="repeats index")
abline(v = truth, col=2)
for(r in 1:Repeats){
set.seed(r)
X <- rpois(n, lambda)
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
segments(CI_l, r, CI_h, r)
if(CI_l < truth & truth < CI_h){
counts <- counts + 1
}
}
counts/Repeats
lambda <- 5
n <- 100
set.seed(32611)
X <- rpois(n, lambda)
B <- 1000
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975)
CI_h <- That - quantile(tB, 0.025)
print(c(CI_l, CI_h))
se_boot
lambda <- 5
n <- 100
set.seed(32611)
X <- rpois(n, lambda)
B <- 1000
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
print(c(CI_l, CI_h))
?boot.ci
lambda <- 5
n <- 1000
truth <- lambda^2 + lambda/n
B <- 1000
Repeats <- 1000
counts <- 0
plot(c(0,100),c(0,Repeats), type="n", xlab="boot CI", ylab="repeats index")
abline(v = truth, col=2)
for(r in 1:Repeats){
set.seed(r)
X <- rpois(n, lambda)
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
tB[b] <- (TB[b] - That)
}
CI_l <- That - quantile(tB, 0.975)
CI_h <- That - quantile(tB, 0.025)
segments(CI_l, r, CI_h, r)
if(CI_l < truth & truth < CI_h){
counts <- counts + 1
}
}
counts/Repeats
?boot.ct
?boot.ci
lambda <- 5
n <- 1000
truth <- lambda^2 + lambda/n
B <- 1000
Repeats <- 1000
counts <- 0
plot(c(0,100),c(0,100), type="n", xlab="boot CI", ylab="repeats index")
abline(v = truth, col=2)
for(r in 1:Repeats){
set.seed(r)
X <- rpois(n, lambda)
TB <- numeric(B)
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
}
segments(quantile(TB, c(0.025)), r, quantile(TB, c(0.975)), r)
if(quantile(TB, c(0.025)) < truth & truth < quantile(TB, c(0.975))){
counts <- counts + 1
}
}
counts/Repeats
gr
gl
gl(n,2)
gl(2,n)
table(gl(2,n))
gl(2,c(n,m))
m <- 100
gl(2,c(n,m))
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
n <- 100
m <- 100
set.seed(32611)
x <- rnorm(n,0,1)
y <- rnorm(n,0,2)
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- mean(x) - mean(y)
head(adataFrame)
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
T
n <- 100
m <- 100
set.seed(32611)
x <- rnorm(n,0,1)
y <- rnorm(n,0,2)
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
B <- 1000
TB <- numeric(B)
for(b in 1:B){
set.seed(b)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
sum(TB >= T)/B
n <- 100
m <- 100
R <- 1000
alpha <- 0.05
counts <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,0,1)
y <- rnorm(n,0,2)
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
B <- 1000
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B > alpha){
counts <- counts + 1
}
}
r
n <- 100
m <- 100
R <- 100
B <- 100
alpha <- 0.05
counts <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,0,1)
y <- rnorm(n,0,2)
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B > alpha){
counts <- counts + 1
}
}
counts/B
n <- 100
m <- 100
R <- 300
B <- 300
alpha <- 0.05
counts <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,0,1)
y <- rnorm(n,0,2)
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B > alpha){
counts <- counts + 1
}
}
counts/B
n <- 100
m <- 100
R <- 300
B <- 300
alpha <- 0.05
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,0,1)
y <- rnorm(n,1,2)
if(t.test(x,y)$p.val>alpha){
counts_ttest <- counts_ttest + 1
}
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B > alpha){
counts <- counts + 1
}
}
n <- 100
m <- 100
R <- 300
B <- 300
alpha <- 0.05
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,0,1)
y <- rnorm(n,1,2)
if(t.test(x,y)$p.val>alpha){
counts_ttest <- counts_ttest + 1
}
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B > alpha){
counts_perm <- counts_perm + 1
}
}
counts_ttest/B
counts_perm/B
T
TB
n <- 100
m <- 100
R <- 300
B <- 300
alpha <- 0.05
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,1)
y <- rnorm(n,0,2)
if(t.test(x,y)$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B < alpha){
counts_perm <- counts_perm + 1
}
}
counts_ttest/B
counts_perm/B
counts_perm
counts_ttest
t.test(x,y)$p.val
sum(TB >= T)/B
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,2)
y <- rnorm(n,0,2)
if(t.test(x,y)$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
}
counts_ttest
R
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,3)
y <- rnorm(n,0,3)
if(t.test(x,y)$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
}
counts_ttest
n <- 100
m <- 100
R <- 300
B <- 300
alpha <- 0.05
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,3)
y <- rnorm(n,0,3)
if(t.test(x,y)$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
adataFrame <- data.frame(data=c(x,y),label=gl(2,n))
T <- with(adataFrame, mean(data[label==1] - data[label==2]))
TB <- numeric(B)
for(b in 1:B){
set.seed(b*r)
bdataFrame <- adataFrame
bdataFrame$label <- sample(bdataFrame$labe)
TB[b] <- with(bdataFrame, mean(data[label==1] - data[label==2]))
}
if(sum(TB >= T)/B < alpha){
counts_perm <- counts_perm + 1
}
}
counts_ttest/B
counts_perm/B
?t.test
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,3)
y <- rnorm(n,0,3)
if(t.test(x,y,alternative = "less")$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
}
counts_ttest
counts_ttest <- 0
counts_perm <- 0
for(r in 1:R){
set.seed(r)
x <- rnorm(n,1,3)
y <- rnorm(n,0,3)
if(t.test(x,y,alternative = "greater")$p.val < alpha){
counts_ttest <- counts_ttest + 1
}
}
counts_ttest
counts_ttest/B
lambda <- 5
n <- 100
set.seed(32611)
X <- rpois(n, lambda)
B <- 1000
TB <- numeric(B)
seB <- numeric(B)
tB <- numeric(B)
lambdaHat <- mean(X)
That <- lambdaHat^2 + lambdaHat/n
for(b in 1:B){
set.seed(b)
aX <- sample(X,n,replace = T)
TB[b] <- (mean(aX))^2
seB[b] <- sqrt(4*lambdaHat^3/n^2)
tB[b] <- (TB[b] - That)/seB[b]
}
se_boot <- sd(TB)/sqrt(n)
CI_l <- That - quantile(tB, 0.975) * se_boot
CI_h <- That - quantile(tB, 0.025) * se_boot
quantile(tB, 0.975)
quantile(tB, 0.025)
se_boot
That
