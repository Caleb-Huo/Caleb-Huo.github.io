install.packages("invgamma")
library(invgamma)
?invgamma
curve(invgamma)
curve(dinvgamma)
curve(dinvgamma,shape=1)
?curve
chippy <- function(x) dinvgamma(x, shape=1)
curve(chippy, 0, 7, n = 2001)
chippy <- function(x) dinvgamma(x, shape=1, scale = 1)
curve(chippy, 0, 7, n = 2001)
chippy <- function(x) dinvgamma(x, shape=0.001, scale = 1)
curve(chippy, 0, 7, n = 2001)
chippy <- function(x) dinvgamma(x, shape=0.001, scale = 0.001)
curve(chippy, 0, 7, n = 2001)
curve(chippy, 0, 700, n = 2001)
chippy <- function(x) dinvgamma(x, shape=1e-10, scale = 1e-10)
curve(chippy, 0, 700, n = 2001)
curve(chippy, 0, 70000, n = 2001)
chippy <- function(x) dgamma(x, shape=1e-10, scale = 1e-10)
curve(chippy, 0, 70000, n = 2001)
chippy <- function(x) dgamma(x, shape=1e-10, scale = 1e-10)
curve(chippy, 0, 70000, n = 2001)
n <- 20
stepsize <- 2
indexes<- expand.grid(i=seq(1,n,by=stepsize), j=seq(1,n,by=stepsize))
indexes
sample1<- sample(n)
sample2<- sample(n)
sample1
sample2
overlap_fisher <- function(a,b) {
s1 <- sample1[1:a]
s2 <- sample2[1:b]
lenA <- as.integer(sum(as.numeric(s1 %in% s2)))
lenB <- length(s1)
lenC <- length(s2)
Odds <- lenA/(lenB-lenA)/(lenC-lenA)*(n*2 - lenB - lenC + lenA)
logOdds <- log(Odds)
#logOdds[!is.finite(logOdds)] <- sign(logOdds[!is.finite(logOdds)]) * 1000000
signs<- 1L
return(c(counts=lenA,
log.pval=as.numeric(logOdds),
signs=as.integer(signs)
))
}
overlap_fisher(3,5)
sample1
sample2
indexes
image(indexes)
image(as.matrix(indexes))
image(as.matrix(indexes),jet.colors(101))
jet.colors <- colorRampPalette(c("#00007F", "blue",
"#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00",
"red", "#7F0000"))
image(as.matrix(indexes),jet.colors(101))
a <- matrix(c(Inf, 3 ,5 , -Inf),2,2)
a
maxPoint <- max(a)
maxPoint
is.finite()
is.finite(a)
maxPoint <- max(a[is.finite(a)])
maxPoint
a
glm
?glm
logit
library(MISKmeans)
S = list(t(S1),t(S2), t(S2))
######################################
## generate data
set.seed(15213)
G = 1000
n11 = 100
n12 = 100
n13 = 150
label1 = c(rep(1,n11),rep(2,n12),rep(3,n13))
P0 = 0.6
P1 = 0.1
P2 = 0.1
P3 = 0.1
P4 = 0.1
sd = 0.5
G0 = G*P0  # nonDE genes
G1 = G*P1  # DE H-L
G2 = G*P2  # DE L-H
G3 = G*P3
G4 = G*P4
mu111 = runif(G1,-0.25,0.25)
mu112 = runif(G1,0.5,1)
mu113 = runif(G1,-1,-0.5)
mu121 = runif(G2,-1,-0.5)
mu122 = runif(G2,-0.25,0.25)
mu123 = runif(G2,0.5,1)
mu131 = runif(G3,-1,-0.5)
mu132 = runif(G3,-0.25,0.25)
mu133 = runif(G3,0.5,1)
mu14 = runif(G4,-0.25,0.25)
mu10 = runif(G0,-0.25,0.25)
Data111 = matrix(rnorm(n11*G1,mu111,sd^2),nrow=G1)
Data112 = matrix(rnorm(n12*G1,mu112,sd^2),nrow=G1)
Data113 = matrix(rnorm(n13*G1,mu113,sd^2),nrow=G1)
Data11 = cbind(Data111,Data112,Data113)
Data121 = matrix(rnorm(n11*G2,mu121,sd^2),nrow=G2)
Data122 = matrix(rnorm(n12*G2,mu122,sd^2),nrow=G2)
Data123 = matrix(rnorm(n13*G2,mu123,sd^2),nrow=G2)
Data12 = cbind(Data121,Data122,Data123)
Data131 = matrix(rnorm(n11*G3,mu131,sd^2),nrow=G3)
Data132 = matrix(rnorm(n12*G3,mu132,sd^2),nrow=G3)
Data133 = matrix(rnorm(n13*G3,mu133,sd^2),nrow=G3)
Data13 = cbind(Data131,Data132,Data133)
Data14 = matrix(rnorm((n11+n12+n13)*G4,mu14,sd^2),nrow=G4)
Data10 = matrix(rnorm((n11+n12+n13)*G0,mu10,sd^2),nrow=G0)
S1 = rbind(Data10,Data11,Data12,Data13,Data14)
G = 1000
n21 = 150
n22 = 100
n23 = 100
label2 = c(rep(1,n21),rep(2,n22),rep(3,n23))
P0 = 0.6
P1 = 0.1 #common features
P2 = 0.1 #common features
P3 = 0.1 #noise in S1
P4 = 0.1 #noise in S2
sd = 0.5
G0 = G*P0  # nonDE genes
G1 = G*P1  # DE H-L
G2 = G*P2  # DE L-H
G3 = G*P3  #noise in S1
G4 = G*P4  #noise in S2
mu211 = runif(G1,-0.25,0.25)
mu212 = runif(G1,0.5,1)
mu213 = runif(G1,-1,-0.5)
mu221 = runif(G2,-1,-0.5)
mu222 = runif(G2,-0.25,0.25)
mu223 = runif(G2,0.5,1)
mu23 = runif(G3,-0.25,0.25)
mu241 = runif(G4,-1,-0.5)
mu242 = runif(G4,-0.25,0.25)
mu243 = runif(G4,0.5,1)
mu20 = runif(G0,-0.25,0.25)
Data211 = matrix(rnorm(n21*G1,mu211,sd^2),nrow=G1)
Data212 = matrix(rnorm(n22*G1,mu212,sd^2),nrow=G1)
Data213 = matrix(rnorm(n23*G1,mu213,sd^2),nrow=G1)
Data21 = cbind(Data211,Data212,Data213)
Data221 = matrix(rnorm(n21*G2,mu221,sd^2),nrow=G2)
Data222 = matrix(rnorm(n22*G2,mu222,sd^2),nrow=G2)
Data223 = matrix(rnorm(n23*G2,mu223,sd^2),nrow=G2)
Data22 = cbind(Data221,Data222,Data223)
Data23 = matrix(rnorm((n21+n22+n23)*G3,mu23,sd^2),nrow=G3)
Data241 = matrix(rnorm(n21*G4,mu241,sd^2),nrow=G4)
Data242 = matrix(rnorm(n22*G4,mu242,sd^2),nrow=G4)
Data243 = matrix(rnorm(n23*G4,mu243,sd^2),nrow=G4)
Data24 = cbind(Data241,Data242,Data243)
Data20 = matrix(rnorm((n21+n22+n23)*G0,mu20,sd^2),nrow=G0)
S2 = rbind(Data20,Data21,Data22,Data23,Data24)
S = list(t(S1),t(S2), t(S2))
res = MetaSparseKmeans(x=S,K=3,wbounds=10,lambda=2)
getWsHeatmap(t(S[[1]]),res$Cs[[1]],res$ws,main='two study after metaSparseKMeans, S1')
library(survival)
survival
?survival
install.packages("survival")
install.packages("survival")
install.packages("survival")
install.packages
?install.packages
sqrt(10680)
install.packages("JGL")
library(JGL)
?JGL
data(example.data)
str(example.data)
example.data
dim(example.data)
sapply(example.data,dim)
fgl.results = JGL(Y=example.data,penalty="fused",lambda1=.25,lambda2=.1)
fgl.results
print.jgl(fgl.results)
JGL
browseVignettes("MetaSparseKmeans")
library(devtools)
install_github("Caleb-Huo/MetaSparseKmeans")
browseVignettes("MetaSparseKmeans")
browseVignettes("MetaSparseKmeans")
install.packages("MetaSparseKmeans_0.0.3.tar.gz",repos=NULL,type="source")
library(devtools)
install_github("Caleb-Huo/MetaSparseKmeans")
browseVignettes("MetaSparseKmeans")
install_github("Caleb-Huo/MetaSparseKmeans", build_vignettes=TRUE)
install_github("Caleb-Huo/MetaSparseKmeans", build_vignettes=TRUE, force=TRUE)
browseVignettes("MetaSparseKmeans")
library(devtools)
install_github("Caleb-Huo/MetaSparseKmeans", build_vignettes=TRUE)
browseVignettes("MetaSparseKmeans")
library(pscl)
library("pscl")
install.packages("pscl")
library("pscl")
?pscl
help(package="pscl")
?Random
set.seed(0.342)
set.seed(32611)
1 + 1
sample(x = a, size = 2)
sample(x = 1:10, size = 2)
rnorm(10, mean = 0, sd=1)
ecdf
pwr.anova.test
library(pwr)
install.packages("pwr")
library(pwr)
pwr.anova.test
?aov
dv <- c(1,3,4,2,2,3,2,5,6,3,4,4,3,5,6)
subject <- factor(c("s1","s1","s1","s2","s2","s2","s3","s3","s3",
"s4","s4","s4","s5","s5","s5"))
myfactor <- factor(c("f1","f2","f3","f1","f2","f3","f1","f2","f3",
"f1","f2","f3","f1","f2","f3"))
mydata <- data.frame(dv, subject, myfactor)
am1 <- aov(dv ~ myfactor + Error(subject/myfactor), data=mydata)
am1
summary(am1)
install.packages('lsr')
etaSquared(am1)
library(lsr)
etaSquared(am1)
class(am1)
outcome <- c( 1.4,2.1,3.0,2.1,3.2,4.7,3.5,4.5,5.4 )  # data
treatment1 <- factor( c( 1,1,1,2,2,2,3,3,3 ))        # grouping variable
anova1 <- aov( outcome ~ treatment1 )                # run the ANOVA
summary( anova1 )                                    # print the ANOVA table
class(anova1)
class(anova1)
etaSquared(anova1)
nPerGroup <- 30
nTime     <- 4
muTreat   <- c(37, 32, 20, 15)
muSham    <- c(37, 32, 25, 22)
stdevs    <- c(12, 10, 8, 6)
stdiff    <- 9
nSim      <- 1000
Subject <- factor(1:(nPerGroup*2))
Subject
Time <- factor(1:nTime, labels = c("0min", "15min", "48hrs", "96hrs"))
Time
theData <- expand.grid(Time, Subject)
Subject
theData
names(theData) <- c("Time", "Subject")
tmp <- rep(c("Treat", "Sham"), each = nPerGroup * nTime)
tmp
theData
tmp <- rep(c("Treat", "Sham"), each = nPerGroup * nTime)
theData$Method <- factor(tmp)
ones <- rep(1, nTime)
nTime
A <- stdevs^2 %o% ones
A
B <- (A + t(A) + (stdiff^2)*(diag(nTime) - ones %o% ones))/2
B
nPerGroup
muTreat
tmp1 <- mvrnorm(nPerGroup, mu = muTreat, Sigma = B)
library(MASS)
tmp1 <- mvrnorm(nPerGroup, mu = muTreat, Sigma = B)
tmp1
tmp2 <- mvrnorm(nPerGroup, mu = muSham, Sigma = B)
tmp2
theData$NDI <- c(as.vector(t(tmp1)), as.vector(t(tmp2)))
theData$NDI
aov
aovComp <- aov(NDI ~ Time*Method + Error(Subject/Time), theData)
aovComp <- aov(NDI ~ Time*Method + Error(Subject), theData)
aovComp
aovComp <- aov(NDI ~ Time*Method + Error(Subject/Time), theData)
aovComp
aovComp <- aov(NDI ~ Time*Method + Error(Subject/Time), theData)
summary(aovComp)
print(model.tables(aovComp, "means"), digits = 3)
boxplot(NDI ~ Time, data = theData)
boxplot(NDI ~ Method, data = theData)
boxplot(NDI ~ Time*Method, data = theData)
with(theData, interaction.plot(Time, Method, NDI))
library(MASS)
summary(aovComp)
summary(aovComp)$'Error: Subject:Time'
summary(aovComp)$'Error: Subject:Time'[[1]]
summary(aovComp)$'Error: Subject:Time'[[1]][2,5]
nSim
mean(replicate(nSim, runTest()))
runTest <- function(){
tmp1 <- mvrnorm(nPerGroup, mu = muTreat, Sigma = B)
tmp2 <- mvrnorm(nPerGroup, mu = muSham, Sigma = B)
theData$NDI <- c(as.vector(t(tmp1)), as.vector(t(tmp2)))
aovComp <- aov(NDI ~ Time*Method + Error(Subject/Time), theData)
b <- summary(aovComp)$'Error: Subject:Time'[[1]][2,5]
b < 0.05
}
mean(replicate(nSim, runTest()))
pwr.anova.test(k = 2, f = 0.25, sig.level = 0.05, power = 0.8)
setwd("/Users/zhuo/Dropbox/teaching/2017FALL/lectures/week4_Matrix/SVDandPCA")
library(imager)
Library not loaded: /opt/X11/lib/libX11.6.dylib
library(imager)
library(imager)
img <- load.image("../figure/pansy.png")
img
plot(img)
library("png")
pp <- readPNG("myfile.png")
rasterImage(img,0,0,1,1)
library("png")
pp <- readPNG("../figure/pansy.png")
rasterImage(img,0,0,1,1)
library(ReadImages)
install.packages("ReadImages")
library(devtools)
install.packages("cran/ReadImages")
install_github("cran/ReadImages")
pp
sapply(pp,dim)
length(pp)
library("png")
pp <- readPNG("../figure/pansy.png")
dim(pp)
image(pp[,,1])
image(pp[,,4])
table(pp[,,4])
greyPP <- apply(pp[,,1:3],3,mean)
image(greyPP)
greyPP
greyPP <- (pp[,,1] + pp[,,2] + pp[,,3])/3
image(greyPP)
?imgae
?image
grey()
grey(12)
grey
image(greyPP, col=grey(100))
gray.colors(100)
image(greyPP, col= gray.colors(100))
?biplot
setwd("/Users/zhuo/Dropbox/Caleb-Huo.github.io/teaching/data/cellCycle")
raw = read.table(file="cellCycle.txt",header=TRUE,as.is=TRUE)
library(impute)
cellCycle = raw
cellCycle[,2:78]<- impute.knn(as.matrix(raw[,2:78]))$data
install.pacakges("impute")
install.packages("impute")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
cellCycle = raw
cellCycle[,2:78]<- impute.knn(as.matrix(raw[,2:78]))$data
library(impute)
cellCycle = raw
cellCycle[,2:78]<- impute.knn(as.matrix(raw[,2:78]))$data
cellCycle
head(cellCycle)
PCA_cellCycle <- prcomp(cellCycle[,2:78],
center = TRUE,
scale. = TRUE)
names(PCA_cellCycle)
?prcomp
dim(PCA_cellCycle$x)
head(PCA_cellCycle$x)
ir.pca <- prcomp(iris.data,
center = TRUE,
scale. = TRUE)
plot(PCA_cellCycle$x[,1], PCA_cellCycle$x[,2])
aData <- cellCycle[,2:78]
colnames(aData)
atype <- cellCycle[,79]
atype
plot(PCA_cellCycle$x[,1], PCA_cellCycle$x[,2], col=as.factor(atype))
s.factor(atype)
library(impute)
library(ggplot2)
head(PCA_cellCycle$x)
ggplot(PCA_cellCycle$x, aes(x=PC1, y=PC2, color=as.factor(atype)))
class(PCA_cellCycle$x)
PCValues <- data.frame(PCA_cellCycle$x, type=as.factor(atype))
ggplot(PCValues, aes(x=PC1, y=PC2, color=type))
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_points()
geom_point()
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point()
names(PCA_cellCycle)
varianceExplained <- cumsum(PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2))
varianceExplained
varianceExplained <- PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2)
PCValues <- data.frame(PCA_cellCycle$x, type=as.factor(atype))
varianceExplained <- PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2)
varianceExplained_PC1 <- paste0(signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0(signif(varianceExplained[2]* 100,3),"%")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2)
#
PCValues <- data.frame(PCA_cellCycle$x, type=as.factor(atype))
varianceExplained <- PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: "signif(varianceExplained[2]* 100,3),"%")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2)
png("cellCycleByGenes.png")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2)
dev.off()
png("cellCycleByGenes.png")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
dev.off()
PCValues <- data.frame(PCA_cellCycle$x, type=as.factor(atype))
varianceExplained <- PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: "signif(varianceExplained[2]* 100,3),"%")
png("cellCycleByGenes.png")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
dev.off()
PCValues <- data.frame(PCA_cellCycle$x, type=as.factor(atype))
varianceExplained <- PCA_cellCycle$sdev^2/sum(PCA_cellCycle$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: ",signif(varianceExplained[2]* 100,3),"%")
png("cellCycleByGenes.png")
ggplot(PCValues, aes(x=PC1, y=PC2, color=type)) + geom_point() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
dev.off()
PCA_cellCycle_sample <- prcomp(t(cellCycle[,2:78]),
center = TRUE,
scale. = TRUE)
PCA_cellCycle_sample$x
colnames(cellCycle)
colnames(aData)
phase <- gsub("[0-9]|.","",colnames(aData))
phase
phase <- gsub("[0-9]|[.]","",colnames(aData))
phase
PCA_cellCycle_sample <- prcomp(t(aData),
center = TRUE,
scale. = TRUE)
#
phase <- gsub("[0-9]|[.]","",colnames(aData))
PCValues <- data.frame(PCA_cellCycle_sample$x, phase=as.factor(phase))
varianceExplained <- PCA_cellCycle_sample$sdev^2/sum(PCA_cellCycle_sample$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: ",signif(varianceExplained[2]* 100,3),"%")
ggplot(PCValues, aes(x=PC1, y=PC2, color=phase)) + geom_path() + labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
phase[grep("cdc", colnames(aData))]
phase <- gsub("[0-9]|[.]","",colnames(aData))
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,".")[1][[1]])
colnames(aData)
sapply(colnames(aData),function(x) strsplit(x,".")[1][[1]])
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,"[.]")[1][[1]])
sapply(colnames(aData),function(x) strsplit(x,"[.]")[1][[1]])
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,"[.]")[1][[1]])[grep("cdc", colnames(aData))]
phase
PC1 <- ir.pca$x[,"PC1"]
phase <- gsub("[0-9]|[.]","",colnames(aData))
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,"[.]")[[1]][1])[grep("cdc", colnames(aData))]
phase
ggplot(PCValues, aes(x=PC1, y=PC2, color=phase)) + geom_path() +
facet_wrap(~phase)+ labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
phase
phase <- gsub("[0-9]|[.]","",colnames(aData))
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,"[.]")[[1]][1])[grep("cdc", colnames(aData))]
PCValues <- data.frame(PCA_cellCycle_sample$x, phase=as.factor(phase))
varianceExplained <- PCA_cellCycle_sample$sdev^2/sum(PCA_cellCycle_sample$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: ",signif(varianceExplained[2]* 100,3),"%")
png("cellCycleBySamples.png")
ggplot(PCValues, aes(x=PC1, y=PC2, color=phase)) + geom_path() +
facet_wrap(~phase)+ labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
dev.off()
PCValues
?grep
phase <- gsub("[0-9]|[.]","",colnames(aData))
phase[grep("cdc", colnames(aData))] <- sapply(colnames(aData),function(x) strsplit(x,"[.]")[[1]][1])[grep("cdc", colnames(aData))]
PCValues <- data.frame(PCA_cellCycle_sample$x, phase=as.factor(phase))
varianceExplained <- PCA_cellCycle_sample$sdev^2/sum(PCA_cellCycle_sample$sdev^2)
varianceExplained_PC1 <- paste0("variance explained: ",signif(varianceExplained[1]* 100,3),"%")
varianceExplained_PC2 <- paste0("variance explained: ",signif(varianceExplained[2]* 100,3),"%")
subsetPhase <- PCValues[- grep("cl", PCValues$phase), ]
png("cellCycleBySamples.png")
ggplot(subsetPhase, aes(x=PC1, y=PC2, color=phase)) + geom_path() +
facet_wrap(~phase)+ labs(x = varianceExplained_PC1, y = varianceExplained_PC2) +
theme(text = element_text(size=20))
dev.off()
