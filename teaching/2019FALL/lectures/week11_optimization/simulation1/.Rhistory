install.packages("titanic")
library(tinanic)
library(titanic)
?titanic
dim(titanic)
data(titanic)
titanic
data("titanic_gender_class_model")
titanic
dim(titanic_train)
dim(titanic_test)
head(titanic_train)
head(titanic_test)
library(titanic)
dim(titanic)
head(titanic_train)
titanic_test
head(titanic_test)
library("randomForest")
library('randomForest')
install.packages("'randomForest'")
install.packages('randomForest')
library("randomForest")
prostate_train <- subset(prostate, subset = train==TRUE)
prostate_test <- subset(prostate, subset = train==FALSE)
library(ElemStatLearn)
library("randomForest")
prostate_train <- subset(prostate, subset = train==TRUE)
prostate_test <- subset(prostate, subset = train==FALSE)
randomForest()
rfit <- randomForest(svi ~ . - train, data = prostate_train)
?randomForest
rfit <- randomForest(as.factor(svi) ~ . - train, data = prostate_train, )
rfit
plot(rfit)
?randomForest
plot.margin(rfit)
margin(rfit)
margin(rfit)
rfit <- randomForest(as.factor(svi) ~ . - train, data = prostate_train, )
rfit
margin(rfit)
prostate_train$svi <- as.character(prostate_train$svi)
rfit <- randomForest(svi ~ . - train, data = prostate_train, )
rfit
margin(rfit)
set.seed(1)
data(iris)
iris.rf <- randomForest(Species ~ ., iris, keep.forest=FALSE)
plot(margin(iris.rf))
importance(rfit)
MDSplot(rfit)
plot(rf)
plot(rfit)
rfit
library("randomForest")
prostate_train <- subset(prostate, subset = train==TRUE)
prostate_test <- subset(prostate, subset = train==FALSE)
rfit <- randomForest(as.factor(svi) ~ . - train, data = prostate_train)
rfit
importance(rfit)
plot(rfit)
a <- plot(rfit)
a
head(a)
barplot
barplot(importance(rfit))
library(ggplot2)
imp <- importance(rfit)
impData <- data.frame(cov = names(imp), imp=imp)
ggplot(impData) + aes(x=cov, y=imp) + geom_bar()
imp
impData <- data.frame(cov = names(imp), imp=imp)
imp <- importance(rfit)
impData <- data.frame(cov = rownames(imp), imp=imp)
ggplot(impData) + aes(x=cov, y=imp) + geom_bar()
ggplot(impData) + aes(x=cov, y=imp) + geom_area()
ggplot(impData) + aes(x=cov, y=imp) + geom_histogram()
ggplot(impData) + aes(x=cov, y=imp) + geom_bar()
ggplot(impData) + aes(x=cov, count=imp) + geom_bar()
ggplot(impData) + aes(x=cov, count=imp, col=cov) + geom_bar()
ggplot(impData) + aes(x=cov, count=imp, fill=cov) + geom_bar()
imp
impData <- data.frame(cov = rownames(imp), imp=imp$MeanDecreaseGini)
ggplot(impData) + aes(x=cov, count=imp, fill=cov) + geom_bar()
imp$MeanDecreaseGini
imp[,1]
impData <- data.frame(cov = rownames(imp), imp=imp[,1])
ggplot(impData) + aes(x=cov, count=imp, fill=cov) + geom_bar()
ggplot(impData) + aes(x=cov, y=imp, fill=cov) + geom_bar(stat="identity")
imp <- importance(rfit)
impData <- data.frame(cov = rownames(imp), importance=imp)
ggplot(impData) + aes(x=cov, y=importance, fill=cov) + geom_bar(stat="identity")
impData
impData <- data.frame(cov = rownames(imp), importance=imp[,1])
impData
predict(rfit, prostate_test)
pred_logistic <- predict(rfit, prostate_test)
ctable <- table(pred_logistic, prostate_test$svi)
ctable
ctable <- table(pred_logistic, trueLabel = prostate_test$svi)
ctable
afit <- rpart(svi ~ . - train, data = prostate_train)
library(rpart)
afit <- rpart(svi ~ . - train, data = prostate_train)
prostate_train
head(prostate_train)
prostate_train[1,3] <- NA
afit <- rpart(svi ~ . - train, data = prostate_train)
afit
8/66
8/67
install.packages("rpart.plot")
install.packages("titanic")
library(ElemStatLearn)
library(rpart)
library(rpart.plot)
head(prostate)
prostate_train <- subset(prostate, subset = train==TRUE)
prostate_test <- subset(prostate, subset = train==FALSE)
afit <- rpart(svi ~ . - train, data = prostate_train)
prostate_train$svi
afit <- rpart(as.factor(svi) ~ . - train, data = prostate_train)
afit
rpart.plot(afit)
library(ElemStatLearn)
library(rpart)
library(rpart.plot)
afit <- rpart(as.factor(svi) ~ . - train, data = prostate)
rpart.plot(afit)
prostate_train <- subset(prostate, subset = train==TRUE)
prostate_test <- subset(prostate, subset = train==FALSE)
afit <- rpart(as.factor(svi) ~ . - train, data = prostate_train) ## svi as binary outcome
#afit <- rpart(svi ~ . - train, data = prostate_train) ## svi as continuous outcome
afit
predProb_cart <- predict(object = afit, newdata = prostate_test)
predProb_cart
atable <- table(predictLabel = predProb_cart>0.5, trueLabel = prostate_test$svi)
prostate_test$svi
predProb_cart
atable <- table(predictLabel = predProb_cart[,"1"], trueLabel = prostate_test$svi)
atable
sum(diag(atable)) / sum(atable)
?randomforest
?randomForest
library("randomForest")
?randomForest
97*87
97*13
67*78
67 * 22
library(ElemStatLearn)
y <- prostate$svi
x <- prostate$lcavol
glm_binomial_logit <- glm(y ~ x,  family = binomial())
beta0 <- summary(glm_binomial_logit)$coefficient["(Intercept)","Estimate"]
summary(glm_binomial_logit)
l2n <- function(avec){
sqrt(sum(avec^2))
}
diffChange <- function(avec, bvec){
deltaVec <- avec - bvec
sumVec <- avec + bvec
l2n(deltaVec)/l2n(sumVec)
}
f <- function(beta){
part1 <- -sum(log(1 + exp(beta[1] + x*beta[2])))
part2 <- sum(y*(beta[1] + x*beta[2]))
## should maximize log likelihood function, so - (part1 + part2)
return( - (part1 + part2))
}
g <- function(beta){
part1 <- sum(x*exp(beta[1] + x*beta[2])/(1 + exp(beta[1] + x*beta[2])))
part2 <- -sum(x*y)
return(part1 + part2)
}
beta <- beta_ini <- c(0,0);
beta_old <- c(0,0);  k <- 0; error <- 1e-9; maxIter = 100
alpha <- 0.5
diffChange(beta - beta_old)
diffChange(beta, beta_old)
beta
beta_old
beta <- beta_ini <- c(3,3);
beta_old <- c(10,10);  k <- 0; error <- 1e-9; maxIter = 100
alpha <- 0.5
decay <- 1/3
diffChange(beta, beta_old)
k <- k + 1
beta_old <- beta
beta_old
g(beta_old)
USArrests
dim(USArrests)
head(USArrests)
?USArrests
head(USArrests)
set.seed(32611)
keams2 <- kmeans(USArrests2, centers = 2)
USArrests2 <- scale(USArrests)
keams2 <- kmeans(USArrests2, centers = 2)
keams2
head(USArrests2)
dim(USArrests2)
library(gplots)
?heatmap.2
color0 <- as.factor(keams2$cluster,level=c(1,2))
levels(color0) <- palette()[1:length(levels(species))]
color <- as.character(color0)
heatmap.2(USArrests2, trace = "none", RowSideColors = color)
keams2$cluster
color0 <- as.factor(keams2$cluster)
color0
levels(color0) <- palette()[1:length(levels(species))]
color <- palette()[keams2$cluster]
heatmap.2(USArrests2, trace = "none", RowSideColors = color)
library(cluster)
gsP.Z <- clusGap(USArrests2, FUN = kmeans, K.max = 8, B = 50)
plot(gsP.Z, main = "k = 3  cluster is optimal")
library(cluster)
gsP.Z <- clusGap(USArrests2, FUN = kmeans, K.max = 8, B = 50, verbose = F)
plot(gsP.Z, main = "k = 4  cluster is optimal")
hc <- hclust(dist(USArrests2))
plot(hc)
res_cutree <- cutree(hc, k = 4) #k = 1 is trivial
res_cutree
set.seed(32611)
kmeans4 <- kmeans(USArrests2, centers = 4, nstart = 20)
table(res_cutree, kmeans4$cluster)
kmeans2
set.seed(32611)
kmeans2 <- kmeans(USArrests2, centers = 2, nstart = 20)
names(kmeans2)
kmeans2$centers
library(titanic)
library(rpart)
library(rpart.plot)
suppressMessages(library(randomForest))
dim(titanic_train)
head(titanic_train)
titanic_train$Survived
