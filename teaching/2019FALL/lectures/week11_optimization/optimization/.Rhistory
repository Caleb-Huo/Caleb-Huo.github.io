beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
beta0
beta0 <- -5.0296
f <- function(beta){
part1 <- -sum(log(1 + exp(beta0 + x*beta)))
part2 <- sum(y*(beta0 + x*beta))
## should maximize log likelihood function, so - (part1 + part2)
return( - (part1 + part2))
}
optimize(f, interval = c(-100,100))
g <- function(beta){
part1 <- sum(x*exp(beta0 + x*beta)/(1 + exp(beta0 + x*beta)))
part2 <- -sum(x*y)
return(part1 + part2)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = -5, to = 5, lwd=2) ## visualize the objective function
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_0 <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_0, f(beta_0), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.1; k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
y <- prostate$svi
x <- prostate$lcavol
beta0 <- -5.0296
f <- function(beta){
part1 <- -sum(log(1 + exp(beta0 + x*beta)))
part2 <- sum(y*(beta0 + x*beta))
## should maximize log likelihood function, so - (part1 + part2)
return( - (part1 + part2))
}
optimize(f, interval = c(-100,100))
g <- function(beta){
part1 <- sum(x*exp(beta0 + x*beta)/(1 + exp(beta0 + x*beta)))
part2 <- -sum(x*y)
return(part1 + part2)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.1; k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 0.1
if(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
print(t)
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
f(beta_old - t*g(beta_old))
f(beta_old)
decay
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.1; k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
abs(beta - beta_old)
k <- k + 1
beta_old <- beta
t <- 0.1
f(beta_old - t*g(beta_old))
f(beta_old)
alpha*t*g(beta_old)^2
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
print(t)
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
print(t)
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
h <- function(beta){
expPart <- exp(beta0 + x*beta)
part1 <- expPart*x/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
beta
beta_old
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
k <- k + 1
beta_old <- beta
h(beta_old)
g(beta_old)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
trace
h <- function(beta){
expPart <- -exp(beta0 + x*beta)
part1 <- expPart*x/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
h <- function(beta){
expPart <- exp(beta0 + x*beta)
part1 <- expPart*x/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 10; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 1; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
trace
h <- function(beta){
expPart <- exp(beta0 + x*beta)
part1 <- expPart*x^2/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 1; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 4; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
beta <- beta_ini <- 4; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
rm(list=ls())
library(ElemStatLearn)
glm_binomial_logit <- glm(svi ~ lcavol, data = prostate,  family = binomial())
summary(glm_binomial_logit)
y <- prostate$svi
x <- prostate$lcavol
beta0 <- -5.0296
f <- function(beta){
part1 <- -sum(log(1 + exp(beta0 + x*beta)))
part2 <- sum(y*(beta0 + x*beta))
## should maximize log likelihood function, so - (part1 + part2)
return( - (part1 + part2))
}
optimize(f, interval = c(-100,100))
g <- function(beta){
part1 <- sum(x*exp(beta0 + x*beta)/(1 + exp(beta0 + x*beta)))
part2 <- -sum(x*y)
return(part1 + part2)
}
h <- function(beta){
expPart <- exp(beta0 + x*beta)
part1 <- expPart*x^2/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
print(t)
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-9; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-9; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.01; k <- 0; error <- 1e-9; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
beta
y
t
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.001; k <- 0; error <- 1e-9; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.005; k <- 0; error <- 1e-9; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-9; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
library(ElemStatLearn)
glm_binomial_logit <- glm(svi ~ lcavol, data = prostate,  family = binomial())
summary(glm_binomial_logit)
y <- prostate$svi
x <- prostate$lcavol
beta0 <- -5.0296
f <- function(beta){
part1 <- -sum(log(1 + exp(beta0 + x*beta)))
part2 <- sum(y*(beta0 + x*beta))
## should maximize log likelihood function, so - (part1 + part2)
return( - (part1 + part2))
}
optimize(f, interval = c(-100,100))
g <- function(beta){
part1 <- sum(x*exp(beta0 + x*beta)/(1 + exp(beta0 + x*beta)))
part2 <- -sum(x*y)
return(part1 + part2)
}
h <- function(beta){
expPart <- exp(beta0 + x*beta)
part1 <- expPart*x^2/(1 + expPart)^2
sum(part1)
}
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1); t <- 0.005; k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
alpha <- 0.5
decay <- 1/3
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
t <- 1
while(f(beta_old - t*g(beta_old)) > f(beta_old) - alpha*t*g(beta_old)^2){
t <- t * decay
}
beta <- beta_old - t*g(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
f_vec <- Vectorize(f, vectorize.args = "beta")
curve(f_vec, xname = "beta",from = 0, to = 5, lwd=2) ## visualize the objective function
beta <- beta_ini <- 3; beta_old <- rnorm(1);  k <- 0; error <- 1e-6; maxIter = 100
points(beta_ini, f(beta_ini), col=1, pch=1)
trace <- beta
while(abs(beta - beta_old) > error & k < maxIter){
k <- k + 1
beta_old <- beta
beta <- beta_old - g(beta_old)/h(beta_old)
trace <- c(trace, beta) ## collecting results
points(beta, f(beta), col=k, pch=19)
}
lines(trace, f_vec(trace), lty = 2)
trace
