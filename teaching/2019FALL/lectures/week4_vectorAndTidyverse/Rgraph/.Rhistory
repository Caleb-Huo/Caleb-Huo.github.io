iris
data(iris)
head(iris)
summary(iris)
str(iris)
names(iris)
iris$Species
uniqueSpecies <- levels(iris$Species)
uniqueSpecies
hist(iris$Petal.Length)
xlims <- range(iris$Petal.Length)
par(mfrow = c(2,2))
xlims <- range(iris$Petal.Length)
uniqueSpecies <- levels(iris$Species)
for(i in 1:3){
aspecies <- uniqueSpecies[i]
hist(aspecies, xlim=xlims, main=aspecies)
}
xlims
class(xlims)
hist(aspecies, xlim=xlims, main=aspecies)
hist(aspecies, main=aspecies)
image(iris[,1:4])
image(iris[[1:4]])
image(as.matrix(iris[,1:4]))
?image
library(lattice)
levelplot(matrix)
matrix <- as.matrix(iris[,1:4])
image(matrix)
levelplot(matrix)
browseVignettes(package = "lattice")
?contour
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
par(op)
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
opar <- par(mfrow = c(2, 2), mar = rep(0, 4))
for(f in pi^(0:3))
contour(cos(r^2)*exp(-r/f),
drawlabels = FALSE, axes = FALSE, frame = TRUE)
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
## contourLines produces the same contour lines as contour
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[1], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
line.list <- contourLines(x, y, volcano)
invisible(lapply(line.list, lines, lwd=3, col=adjustcolor(2, .3)))
par(opar)
## contourLines produces the same contour lines as contour
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[1], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
line.list <- contourLines(x, y, volcano)
invisible(lapply(line.list, lines, lwd=3, col=adjustcolor(2, .3)))
par(opar)
## contourLines produces the same contour lines as contour
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[1], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
?lattice
RShowDoc("NEWS", package = "lattice")
?matrix
mdat
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = FALSE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
rownames(mat)
colnames(mat)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = FALSE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat
99^2
99^2/10
sqrt(99^2/10)
n <- 100
df <- data.frame(x = c(rnorm(n, 0, 3), rnorm(n, 0, 10)),
g = gl(2, n))
ggplot(df, aes(x, colour = g)) + stat_ecdf()
library(ggplot2)
n <- 100
df <- data.frame(x = c(rnorm(n, 0, 3), rnorm(n, 0, 10)),
g = gl(2, n))
ggplot(df, aes(x, colour = g)) + stat_ecdf()
dim(faithful)
head(faithful)
?faithful
head(mpg)
ggplot(mpg, aes(x = displ, y = hwy) + geom_points()
)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_points()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
stat_ellipse()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() +   stat_ellipse()
ggplot(mpg, aes(x = displ, y = hwy, color=class)) + geom_point() +   stat_ellipse()
ggplot(mpg, aes(x = displ, y = hwy, color=displ > 4)) + geom_point() +   stat_ellipse()
set.seed(32608)
df <- data.frame(
x = rnorm(n)
)
x <- df$x
base <- ggplot(df, aes(x)) + geom_density()
base + stat_function(fun = dnorm, colour = "red")
base <- ggplot(df, aes(x), xlim=c(-3,3)) + geom_density()
base + stat_function(fun = dnorm, colour = "red")
base <- ggplot(df, aes(x)) + geom_density()
base + stat_function(fun = dnorm, colour = "red") + xlim(c(-3,3))
df <- data.frame(y = rt(200, df = 5))
p <- ggplot(df, aes(sample = y)) #sample aesthetic is required
p + stat_qq() #default compare to normal quantile
p <- ggplot(mtcars, aes(disp, wt)) +
geom_point() +
geom_smooth()
p
p + xlim(325, 500)
p + coord_cartesian(xlim = c(325, 500))
p + coord_cartesian(xlim = c(325, 500), expand = FALSE)
p + coord_cartesian(expand = FALSE)
library(ggplot2)
p <- ggplot(mtcars, aes(disp, wt)) +
geom_point() +
geom_smooth()
p
p + xlim(325, 500)
p + scale_x_continuous(limits = c(325, 500))
p + coord_cartesian(xlim = c(325, 500))
p + scale_x_continuous(limits = c(325, 500))
p + coord_cartesian(xlim = c(325, 500), expand = FALSE)
p + coord_cartesian(expand = FALSE)
p + coord_cartesian(expand = TRUE)
p + coord_cartesian(expand = FALSE)
d <- ggplot(diamonds, aes(carat, price)) +
stat_bin2d(bins = 25, colour = "white")
d
d + scale_x_continuous(limits = c(0, 1))
d + coord_cartesian(xlim = c(0, 1))
d + scale_x_continuous(limits = c(0, 1))
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p + coord_fixed(ratio = 1)
p + coord_fixed(ratio = 5)
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
coord_flip()
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45)
world <- map_data("world")
install.packages("map_data")
install.packages("maps")
map_data
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45)
worldmap
dim(world)
head(world)
worldmap + coord_map("ortho", orientation = c(41, -74, 0))
install.packages("mapproj")
worldmap + coord_map("ortho", orientation = c(41, -74, 0))
pie <- ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
p + xlim(325, 500)
p <- ggplot(mtcars, aes(disp, wt)) +
geom_point() +
geom_smooth()
p
p + xlim(325, 500)
p + coord_cartesian(xlim = c(325, 500))
p + xlim(325, 500)
p
p + coord_cartesian(xlim = c(325, 500))
p + xlim(325, 500)
ggplot(mtcars, aes(class, mpg)) +
geom_boxplot() +
coord_flip()
mtcars
mpg
p <- ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
p
p + coord_cartesian(xlim = c(3, 5), expand = FALSE)
n <- 100
df <- data.frame(x = c(rnorm(n, 0, 3), rnorm(n, 0, 10)),
g = gl(2, n))
ggplot(df, aes(x, colour = g)) + stat_ecdf()
mpg
p <- ggplot(mpg) + geom_point(aes(x = displ, y = hwy,
colour=factor(cyl))) + facet_wrap(~class)
p
p <- ggplot(mpg) + geom_point(aes(x = displ, y = hwy,
colour=factor(cyl)))
p + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p <- ggplot(mpg) + geom_point(aes(x = displ, y = hwy,
colour=factor(cyl)))
p + theme(title = "my title",
axis.text.x = "my x axis")
p + theme(title = "my title",
axis.text.x = element_text(family = "arial"))
p + theme(title = element_text("my title"),
axis.text.x = element_text(family = "arial"))
p + theme(title = element_text("my title"),
axis.text.x = element_text(family = "Arial"))
p + title("my title") + theme(axis.text.x = element_text(family = "Arial"))
p
p + title("my title") + theme(axis.text.x = element_text(family = "Arial"))
p + labs(title = "New plot title") + theme(axis.text.x = element_text(family = "Arial"))
p +
labs(title = "New plot title", x = "New x label", y = "New y label")+ theme(axis.text.x = element_text(family = "Arial"))
p +
labs(title = "New plot title", x = "New x label", y = "New y label")+ theme(axis.text.x = element_text(family = "Arial", colour = "red"))
?theme
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar(position="dodge") #side by side
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar(position="fill") #fill up to 1
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar(position="stack") #simply stack up
ggplot(mpg, aes(class, fill=hwy)) + geom_bar(position="dodge") #side by side
ggplot(mpg, aes(class, fill=cyl)) + geom_bar(position="dodge") #side by side
ggplot(mpg, aes(class, fill=as.factor(cyl))) + geom_bar(position="dodge") #side by
?density
par(nfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length)
plot(density(iris$Petal.Length), add=T)
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length)
plot(density(iris$Petal.Length), add=T)
dev.off()
dev.off()
par(mfrow=c(2,2))
hist(iris$Petal.Length, nclass=50)
par(mfrow=c(2,2))
hist(iris$Petal.Length)
plot(density(iris$Petal.Length), add=T)
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length,  prob=TRUE, col="grey")
lines(density(iris$Petal.Length), col="blue")
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length,  prob=TRUE, col="grey")
lines(density(iris$Petal.Length), col="blue")
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length,  prob=TRUE, col="grey")
lines(density(iris$Petal.Length), col="blue")
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length,  prob=TRUE, col="grey")
lines(density(iris$Petal.Length), col="blue")
par(mfrow=c(2,2))
hist(iris$Petal.Length)
hist(iris$Petal.Length, nclass=50)
hist(iris$Petal.Length,  prob=TRUE, col="grey")
lines(density(iris$Petal.Length), col="blue")
library(lattice)
levelplot(matrix)
matrix <- as.matrix(iris[,1:4])
library(lattice)
levelplot(matrix)
?levelplot
install.packages("map")
map_data
ggplot2::map_data
install.packages("maps")
install.packages("mapproj")
?mpg
ggplot(mpg, aes(class, fill=as.factor(cyl))) + geom_bar(position="dodge")
library(ggplot2)
ggplot(mpg, aes(class, fill=as.factor(cyl))) + geom_bar(position="dodge")
ggplot(mpg, aes(class, fill=as.factor(cyl))) + geom_bar()
df <- data.frame(x = rnorm(1000))
ggplot(df, aes(x)) + stat_ecdf(geom = "step")
df <- data.frame(x = rnorm(1000))
ggplot(df, aes(x))
mtcars
ggplot(mtcars, aes(x = factor(1), fill = factor(cyl)))
ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie <- ggplot(mpg, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
tale(mpg$cyl)
table(mpg$cyl)
pie + coord_polar(theta = "y")
pie + coord_polar(theta = "y") + theme_bw()
pie + coord_polar(theta = "y") + theme_bw()
?theme
?labs
x <- y <- seq(-1, 1, len=25)
z <- outer(x, y, FUN=function(x,y) -x*y*exp(-x^2-y^2))
# Contour plots
contour(x,y,z, main="Contour Plot")
filled.contour(x,y,z, main="Filled Contour Plot")
filled.contour(x,y,z, color.palette = heat.colors)
filled.contour(x,y,z, color.palette = colorRampPalette(c("red", "white", "blue")))
plot(x,y, main="sin function with Gaussian noise",
xlab="x axis", ylab="y axis",
cex=2, cex.axis=2, cex.lab=2, cex.main=2, cex.sub=2)
n <- 80
set.seed(32611)
x <- sort(runif(n, min = 0, max=2*pi))
y <- sin(x) + rnorm(n, mean = 0, sd = 0.2)
plot(x,y)
plot(x,y, main="sin function with Gaussian noise",
xlab="x axis", ylab="y axis",
cex=2, cex.axis=2, cex.lab=2, cex.main=2, cex.sub=2)
plot(x,y, main="sin function with Gaussian noise",
xlab="x axis", ylab="y axis",
cex=2)
plot(x,y, main="sin function with Gaussian noise",
xlab="x axis", ylab="y axis",
cex=2, cex.axis=2, cex.lab=2, cex.main=2, cex.sub=2)
colors()
matrix <- as.matrix(iris[,1:4])
image(matrix)
heatmap(matrix, Rowv = NA, Colv = NA)
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
heatmap(matrix, col= greenRed, Rowv = NA, Colv = NA)
greenRed
species
species <- iris$Species
species
palette()
rowColor <- palette()[species]
rowColor
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
species <- iris$Species
levels(species) <- 1:3
rowColor <- palette()[species]
heatmap(matrix, col= greenRed, Rowv = NA, Colv = NA, RowSideColors = rowColor)
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
species <- iris$Species
levels(species) <- 1:3
rowColor <- palette()[species]
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA,
RowSideColors = rowColor,
labRow = "", labCol = "")
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
species <- iris$Species
levels(species) <- 1:3
rowColor <- palette()[species]
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA, RowSideColors = rowColor)
matrix <- as.matrix(iris[,1:4])
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
species <- iris$Species
levels(species) <- 1:3
rowColor <- palette()[species]
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA, RowSideColors = rowColor)
legend("top",legend = c(1),fill="red")
iris$Species
B=16
greenRed <- rgb(c(rep(0, B), (0:B)/B), c((B:0)/16, rep(0, B)), rep(0, 2*B+1))
species <- iris$Species
levels(species) <- 1:3
rowColor <- palette()[species]
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA, RowSideColors = rowColor, main="heatmap of iris data")
legend("top",legend = levels(iris$Species),fill=levels(species))
heatmap(matrix, col= greenRed, margins = c(3,4),
Rowv = NA, Colv = NA, RowSideColors = rowColor, main="heatmap of iris data")
legend("top",legend = levels(iris$Species),fill=levels(species))
legend("top",legend = levels(iris$Species),fill=levels(species), horiz = T)
heatmap(matrix, col= greenRed,margins = c(6,6),
Rowv = NA, Colv = NA, RowSideColors = rowColor, main="heatmap of iris data")
legend("bottom",legend = levels(iris$Species),fill=levels(species))
heatmap(matrix, col= greenRed,margins = c(6,6),
Rowv = NA, Colv = NA, RowSideColors = rowColor, main="heatmap of iris data")
legend("bottom",legend = levels(iris$Species),fill=levels(species))
legend("bottomright",legend = levels(iris$Species),fill=levels(species))
legend("topright",legend = levels(iris$Species),fill=levels(species))
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA, RowSideColors = rowColor, main="heatmap of iris data")
legend("topright",legend = levels(iris$Species),fill=levels(species))
heatmap(matrix, col= greenRed,
Rowv = NA, Colv = NA,
RowSideColors = rowColor,
labRow = "", labCol = "", main="heatmap of iris data")
legend("topright",legend = levels(iris$Species),fill=levels(species))
?heatmap
